// Generated by CoffeeScript 1.11.1
(function() {
  var createViz;

  createViz = function(opts, verts) {
    var VizGeo, VizObject, config, i, len, line, material, vert;
    config = opts || {
      height: 500,
      width: 500,
      linesHeight: 10,
      linesWidth: 10,
      color: 0xDD006C
    };
    material = new THREE.LineBasicMaterial({
      color: config.color,
      opacity: 0.2
    });
    VizObject = new THREE.Object3D;
    VizGeo = new THREE.Geometry;
    for (i = 0, len = verts.length; i < len; i++) {
      vert = verts[i];
      VizGeo.vertices.push(new THREE.Vector3(vert[0], verts[1], verts[2]));
    }
    line = new THREE.Line(VizGeo, material, THREE.LinePieces);
    VizObject.add(line);
    return VizObject;
  };

  paper.install(window);

  window.onload = function() {
    var animate, animateCameraFov, animateX, animateY, axes, camera, controls, cube, cube2, cube3, cubeGeo2, cubeGeo3, cubeGeometry, cubeMaterial, data, geometry, gui, line, material, material2, material3, opts, params, plane, planeGeometry, planeMaterial, renderer, scene, spotLight, viz;
    scene = new THREE.Scene;
    camera = new THREE.PerspectiveCamera(45, window.innerWidth / window.innerHeight, .1, 1000);
    renderer = new THREE.WebGLRenderer;
    camera.lookAt(new THREE.Vector3(0, 0, 0));
    material = new THREE.LineBasicMaterial({
      color: 0xffffff
    });
    geometry = new THREE.Geometry;
    geometry.vertices.push(new THREE.Vector3(-10, 0, 0));
    geometry.vertices.push(new THREE.Vector3(20, 10, 0));
    geometry.vertices.push(new THREE.Vector3(10, 0, 0));
    geometry.vertices.push(new THREE.Vector3(10, 10, 10));
    geometry.vertices.push(new THREE.Vector3(10, 20, 20));
    geometry.vertices.push(new THREE.Vector3(10, 30, 40));
    line = new THREE.Line(geometry, material);
    scene.add(line);
    animate = function(r) {
      renderer.render(scene, camera);
      requestAnimationFrame(animate);
    };
    animateX = function(x) {
      camera.position.x = x;
      renderer.render(scene, camera);
      requestAnimationFrame(animate);
    };
    animateY = function(y) {
      camera.position.y = y;
      renderer.render(scene, camera);
      requestAnimationFrame(animate);
    };
    animateCameraFov = function(f) {
      camera.setFocalLength(f);
      renderer.render(scene, camera);
      requestAnimationFrame(animate);
    };
    renderer.setSize(window.innerWidth, window.innerHeight);
    renderer.shadowMapEnabled = true;
    controls = new THREE.OrbitControls(camera);
    axes = new THREE.AxisHelper(100);
    scene.add(axes);
    planeGeometry = new THREE.PlaneGeometry(60, 20);
    planeMaterial = new THREE.MeshLambertMaterial(0xffffff);
    plane = new THREE.Mesh(planeGeometry, planeMaterial);
    plane.rotation.x = -.5 * Math.PI;
    plane.position.x = 15;
    plane.receiveShadow = true;
    scene.add(plane);
    cubeGeometry = new THREE.CubeGeometry(4, 4, 4);
    cubeMaterial = new THREE.MeshBasicMaterial({
      color: 0xaaaaaa,
      wireframe: true
    });
    cube = new THREE.Mesh(cubeGeometry, cubeMaterial);
    cube.position.x = 0;
    cube.position.z = 0;
    cube.position.y = 2;
    cube.castShadow = true;
    scene.add(cube);
    material2 = new THREE.MeshLambertMaterial({
      color: 0xff0000
    });
    material3 = new THREE.MeshPhongMaterial({
      color: 0xffff00
    });
    cubeGeo2 = new THREE.CubeGeometry(4, 4, 4);
    cubeGeo3 = new THREE.CubeGeometry(4, 4, 4);
    cube2 = new THREE.Mesh(cubeGeo2, material2);
    cube3 = new THREE.Mesh(cubeGeo3, material3);
    cube2.position.x = 10;
    cube2.position.z = 0;
    cube2.position.y = 2;
    cube2.castShadow = true;
    scene.add(cube2);
    cube3.position.x = 20;
    cube3.position.z = 0;
    cube3.position.y = 2;
    cube3.castShadow = true;
    scene.add(cube3);
    spotLight = new THREE.SpotLight(0xffffff);
    spotLight.position.set(-20, 60, 0);
    spotLight.castShadow = true;
    scene.add(spotLight);
    opts = {
      height: 500,
      width: 500,
      linesHeight: 10,
      linesWidth: 10,
      color: 0xDD006C
    };
    data = [[0, 1, 1], [0, 4, 5], [5, 4, 4]];
    viz = createViz(opts, data);
    scene.add(viz);
    camera.lookAt(viz);
    camera.position.x = -30;
    camera.position.y = 40;
    camera.position.z = 30;
    camera.lookAt(scene.position);
    document.getElementById('gl').appendChild(renderer.domElement);
    gui = new dat.GUI;
    params = new (function() {
      this.speed = 1;
      this.camX = 19;
      this.camY = 21;
      this.camFov = -2.1;
    });
    gui.add(params, 'camX', -90, 90).onChange(function(e) {
      animateX(e);
      return console.log(e);
    });
    gui.add(params, 'camY', -90, 90).onChange(function(e) {
      console.log(e);
      return animateY(e);
    });
    gui.add(params, 'camFov', -20, 79).onChange(function(e) {
      console.log(e);
      return animateCameraFov(e);
    });
    return gui.add(params, 'speed', -5, 5).onChange(function(e) {
      console.log(e);
      animate(e);
      return;
      console.log(e);
    });
  };

}).call(this);
